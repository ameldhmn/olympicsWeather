---
title: "EXERCICE4"
format: html
editor: visual
---

# Exercices - Semaine 4

### Question 1

#### Installez les packages devtools, httr2, jsonlite.

```{r}
library(devtools)
library(httr2)
library(jsonlite)
library(usethis)
library(htmltools)
library(tibble)
library(purrr)
library(leaflet)
library(sf)
library(testthat)
library(tidygeocoder)
library(roxygen2)
library(lubridate)
library(dplyr)
library(ggplot2)
```

### Question 2

::: {style="text-align: justify;"}
#### Dans une nouvelle session R, créer un nouveau projet de package intitulé olympicsWeather en utilisant la fonction create_package de la librairie usethis. Pourquoi n’est-il pas nécessaire d’installer explicitement usethis ?
:::

```{r}
usethis::create_package("olympicsWeather")
```

### Question 3

::: {style="text-align: justify;"}
#### Créer un nouveau script R intitulé get_weather_forecast en utilisant la fonction usethis::use_r().
:::

```{r}
usethis::use_r("get_weather_forecast")
```

### Question 4

::: {style="text-align: justify;"}
#### Sans implémenter la fonction pour l’instant, écrivez une requête d’api en utilisant la librairie httr2 que vous aurez préalablement installé.

• l’url de l’api open-api est la suivante: [https://api.open-meteo.com/v1/forecast](https://www.google.com/url?q=https://api.open-meteo.com/v1/forecast&source=gmail-html&ust=1708971790254000&usg=AOvVaw1RR4vboZVa1vX4Vubr9VIU)\
• vous utiliserez les fonctions request, req_url_query, req_perform, resp_body_json pour passer la requête. Ces instructions peuvent se chaîner avec des pipes. La fonction request permet d’initialiser l’objet de request en passant l’url de l’api. La fonction req_url_query permet de passer différents paramètres à la requête, quand req_perform exécute la requête et récupère les résultats dans la session R. Enfin, la fonction resp_body_json extrait les données retournées en json du résultat de la requête. Vous pourrez utiliser la fonction tibble::as_tibble() pour convertir en tibble la table retournée.\
• pour la première requête, nous souhaitons obtenir la prévision météo aux coordonnées géographiques c(48.85, 2.35)\
•nous souhaitons obtenir les informations de températures, de températures ressenties, de probabilité de précipitation, et de quantités de précipitations. Indice, vous devrez passer le paramètre suivant (entre autres) hourly= c(“temperature_2m”, “apparent_temperature”, “precipitation_probability”, “precipitation”) à la fonction req_url_query
:::

```{r}
url <- "https://api.open-meteo.com/v1/forecast"
request(url) |>
  req_url_query(latitude = 48.85,
                longitude = 2.35,
                hourly= c("temperature_2m",
                          "apparent_temperature",
                          "precipitation_probability",
                          "precipitation"),
                .multi = "comma") |>
  req_perform() |>
  resp_body_json() |>
  tibble::as_tibble()
```

### Question 5

::: {style="text-align: justify;"}
#### Décrivez le résultat. Qu’avons nous obtenu suite à notre requête ? Quels paramètres souhaitons nous changer si nous voulons pouvoir récupérer les prévisions météo pour tous les sites des JOs ?
:::

::: {style="text-align: justify;"}
Nous avons obtenu un tibble qui contient plusieurs informations météorologiques pour un endroit spécifique situé à la latitude 48.85 et la longitude 2.85.

Ce tibble comporte cinq lignes, chacune représentant un aspect différent des données météorologiques.

Il est par ailleurs composé de neuf colonnes, incluant notamment les latitudes et longitudes, les unités des mesures horaires de chaque ligne, l'abréviation du fuseau horaire, le fuseau goraire, l'élévation de l'endroit, et une colonne appelée “hourly”, qui présente les horaires et qui est particulièrement intéressante. Dans cette colonne “hourly”, chaque paramètre météorologique est représenté par une liste, reflétant son évolution dans le temps à une adresse spécifique. Ainsi, pour chaque site, nous pouvons observer comment les différents paramètres météorologiques évoluent heure par heure.

Cependant, pour collecter les prévisions météorologiques pour tous les sites des Jeux Olympiques, il est nécessaire d'ajuster la longitude et la latitude correspondant à chaque site. Par conséquent, nous devons créer une fonction qui recueille initialement la latitude et la longitude pour chaque site olympique. Cette fonction nous permettra d'interroger l'API météo avec les coordonnées correctes pour obtenir les données météorologiques spécifiques à chaque site. En ajustant les coordonnées, nous pourrons ainsi obtenir les prévisions météorologiques pour tous les sites des Jeux Olympiques.
:::

### Question 6

::: {style="text-align: justify;"}
#### L’objectif est donc d’implémenter une fonction get_weather_forecast pour récupérer une table de prévisions météo à une coordonnées GPS donnée. Avant d’implémenter cette fonction accessible à l’utilisateur, nous souhaitons implémenter plusieurs fonctions internes
:::

### Question 7

#### Fonction perform_request:

::: {style="text-align: justify;"}
• la fonction perform request prend en entrée deux arguments: latitude et longitude\
• elle effectue la requête sur l’api publique ci-dessus, et retourne le contenu du body sous forme d’une tibble (exactement comme dans la question 4)
:::

```{r}
#' @param latitude latitude (numeric)
#' @param longitude longitude (numeric)
#' @return le contenu du body sous forme d'un tibble de 5 lignes et 9 colonnes
perform_request <- function(latitude, longitude){
  url <- "https://api.open-meteo.com/v1/forecast"
  request(url) |>
    req_url_query(latitude = latitude,
                  longitude = longitude,
                  hourly= c("temperature_2m",
                            "apparent_temperature",
                            "precipitation_probability",
                            "precipitation"),
                  .multi = "comma") |>
    req_perform() |>
    resp_body_json() |>
    as_tibble()
}
resp <- perform_request(47.216671, -1.55)
resp
```

Notre fonction opère de manière efficace, permettant la récupération des données météorologiques de tout point en utilisant simplement ses coordonnées GPS, à savoir, la latitude et la longitude.

### Question 8

#### Fonction unnest_response:

• les résultats obtenus après la requête n’étant pas bien formattés, il faut écrire une fonction pour transformer la forme de la tibble obtenue\
• la fonction en entrée prendre une tibble au format issu de la requête\
• et retournera les mêmes données au schema suivant:\
– date_heure: heure au tz UTC\
– tempature_celsius: données de température\
– temperature_ressentie_celsius: données de température ressentie\
– precipation_proba: probabilité de pluie\
– precipitation: precipitation en mm

```{r}
#' Décompacte les données de réponse des prévisions météorologiques.
#'
#' @param resp Résultat de la fonction précédente, tibble 5x9
#' @return Un nouveau tibble comprenant 168 observations et 5 variables
#' @export
unnest_response <- function(resp){
  hourly_donnees <- resp$hourly
  if (length(hourly_donnees) == 0) {
    stop("Aucune donnée dans la colonne 'hourly'.")
  }
  output_tibble <- tibble(
    "heure au tz UTC" = with_tz(unlist(hourly_donnees[[1]]), tzone = "UTC"),
    "données de température" = unlist(hourly_donnees[[2]]),
    "données de température ressentie" = unlist(hourly_donnees[[3]]),
    "probabilité de pluie" = unlist(hourly_donnees[[4]]),
    "precipitation en mm" = unlist(hourly_donnees[[5]])
  )
  return(output_tibble)
}
resp2 <- unnest_response(resp)
resp2
```

### Question 9

#### Tests unitaires pour la fonction unnest_response:

• créez un script de tests en utilisant la fonction usethis::use_test(“unnest_response”)\
• dans ce script, créez un jeu de données minimal pour tester le comportement de la fonction\
• testez la fonction, en proposant plusieurs tests unitaires. Exemple de tests unitaires:\
– testez que la fonction renvoie le bon nombre de lignes\
– testez que les valeurs de la colonne temperature correspondent aux valeur proposées en entrée\
– testez le nom des colonnes en sortie\
– testez le nombre de colonnes en sortie

```{r}
usethis::use_test("unnest_response")
testthat::test_dir('tests/testthat/')
```

##### création du jeu de données minimal pour tester le comportement de la fonction

```{r}
test_resp <- list(
  hourly = list(
    heure = ymd_hms("2024-03-05 08:00:00", tz = "UTC"),
    temperature = c(10, 12, 14),
    temperature_ressentie = c(8, 10, 12),
    probabilite_pluie = c(0.1, 0.2, 0.3),
    precipitation_mm = c(0, 0.5, 1)
  )
)
```

##### test que la fonction renvoie le bon nombre de lignes

```{r}
test_that("La fonction renvoie le bon nombre de lignes", {
  resp <- unnest_response(test_resp)
  expect_equal(nrow(resp), 3)
})
```

##### test que les valeurs de la colonne temperature correspondent aux valeur proposées en entrée

```{r}
test_that("Les valeurs de la colonne temperature correspondent aux valeurs proposées en entrée", {
  resp <- unnest_response(test_resp)
  expect_equal(resp$`données de température`, c(10, 12, 14))
})
```

##### test le nom des colonnes en sortie

```{r}
test_that("Le nom des colonnes en sortie est correct", {
  resp <- unnest_response(test_resp)
  expect_named(resp, c("heure au tz UTC", "données de température", "données de température ressentie", "probabilité de pluie", "precipitation en mm"))
})
```

##### test le nombre de colonnes en sortie

```{r}
test_that("Le nombre de colonnes en sortie est correct", {
  resp <- unnest_response(test_resp)
  expect_equal(ncol(resp), 5)
})
```

La fonction “unnest_response” réussit tous les tests.

### Question 10

::: {style="text-align: justify;"}
#### Lors de la séance 1, nous avons développé un outil permettant de trouver les coordonnées GPS à partir d’un nom d’adresse (en utilisant le package tidygeocoder et la fonction reverse_geocode). Nous souhaitons que l’utilisateur puisse obtenir des prévisions météos à partir de:
:::

• coordonnées GPS, i.e un vecteur numérique de taille 2\

• un nom de site olympique ou une adresse. A partir du code de la séance 1, définissez une fonction address_to_gps convertissant une adresse en coordonnées gps sous la forme d’un vecteur numérique de taille 2.

Définir une fonction get_forecast générique, et deux implémentations get_forecast.character et get_forecast.numeric.

```{r}
#' Convertit une adresse en coordonnées GPS.
#'
#' @param adresse Adresse à géocoder
#' @return Coordonnées GPS obtenues à partir de l'adresse
address_to_gps <- function(adresse) {
  df_adresse <- data.frame("nom" = character(), addr = character(), stringsAsFactors = FALSE)

  df_adresse <- rbind(df_adresse, data.frame(addr = adresse), stringsAsFactors = FALSE)

  resultat_geocodage <- df_adresse |>
    geocode(addr, method = 'arcgis')

  df_adresse <- resultat_geocodage

  return(df_adresse)
  print(df_adresse)
}

resultat10 <- as_tibble(address_to_gps("Bâtiment Erdre, Chem. de la Censive du Tertre, 44300 Nantes"))
resultat10

library(leaflet)
carte <- leaflet()  |> 
  addTiles()  |> 
  addMarkers(lng = resultat10$long, lat = resultat10$lat, popup = "IAE Nantes")
carte
```

##### Fonction générique pour obtenir les prévisions météo

```{r}
get_forecast <- function(location, ...) {
  UseMethod("get_forecast", location)
}
```

##### Implémentation pour les caractères

```{r}
get_forecast.character <- function(location, ...) {
  coords <- address_to_gps(location)
  return(perform_request(coords[2], coords[1], ...))
}
```

##### Implémentation pour les vecteurs numériques (coordonnées GPS par exemple)

```{r}
get_forecast.numeric <- function(location, ...) {
  return(perform_request(location[2], location[1], ...))
}
```

::: {style="text-align: justify;"}
Pour valider l'exactitude des coordonnées de l'adresse renseignée, il convenait d'utiliser la fonction pour récupérer les coordonnées GPS associées à cette adresse. Ensuite, de visualier la cartographique qui affiche ces coordonnées sur une carte géographique. Cette visualisation a permis de vérifier visuellement si les coordonnées récupérées correspondent à l'emplacement attendu sur la carte.
:::

### Question 11

#### Implémentez une fonction interne get_gps_coordinate renvoyant des coordonnées x,y pour une adresse en utilisant les fonctions de la question 10 (ou de la semaine 1).

```{r}
#' Obtient les coordonnées GPS à partir d'une adresse.
#'
#' @param adresse Adresse à géocoder
#' @return Coordonnées GPS obtenues à partir de l'adresse
#' @export
get_gps_coordinate <- function(adresse) {
  resultat_geocodage <- address_to_gps(adresse)

  coordonnees <- c(resultat_geocodage$lat, resultat_geocodage$long)

  return(coordonnees)
  print(coordonnees)
}

get_gps_coordinate("Bâtiment Erdre, Chem. de la Censive du Tertre, 44300 Nantes")
```

Notre fonction renvoie avec précision les coordonnées du lieu demandé.

### Question 12

::: {style="text-align: justify;"}
#### Implémentez la fonction get_forecast.numeric. Cette fonction prend en entrée un argument xy, contenant un vecteur numérique de coordonnées x,y (latitude, longitude) de taille 2. Si cette condition n’est pas vérifiée, alors la fonction devra déclarer une erreur. La fonction appelera les deux fonctions perform_request et unnest_response avant de retourner la tibble de résultat.
:::

```{r}
#' Obtient les prévisions météorologiques à partir de coordonnées GPS.
#'
#' @param xy Vecteur numérique avec x les latitudes et y les longitudes
#' @return Un tibble 168x5
#' @export
get_forecast.numeric <- function(xy, ...) {
  if (!is.numeric(xy) || length(xy) != 2) {
    stop("Erreur ! L'argument xy doit être un vecteur numérique de taille 2 !")
  }

  response_table <- perform_request(xy[2], xy[1], ...)

  unnested_table <- unnest_response(response_table)

  return(unnested_table)
}

xy <- c(47.243140, -1.554258)
resultat12 <- get_forecast.numeric(xy)
resultat12
```

::: {style="text-align: justify;"}
Notre fonction est efficace puisqu'elle signale correctement les erreurs lorsque le vecteur n'est ni numérique ni de taille 2, et récupère avec succès les données météorologiques pour les coordonnées fournies lorsqu'elles sont un vecteur numérique de taille 2.
:::

### Question 13

::: {style="text-align: justify;"}
#### Implémentez la fonction get_forecast.character. Cette fonction prend en entrée un argument address, de type character, de taille 1. Si cette condition n’est pas vérifiée, alors la fonction devra déclarer une erreur. La fonction appelera les deux fonctions address_to_gps puis la fonction get_forecast en passant le résultat de l’appel à address_to_gps.
:::

```{r}
#' Prévisions météorologiques à partir d'une adresse.
#'
#' @param adresse Adresse à géocoder
#' @return Les prévisions météorologiques obtenues
#' @export
forecast.character <- function(adresse) {
  if (!is.character(adresse) || length(adresse) != 1) {
    stop("L'argument address doit être de type character et de taille 1.")
  }
}

#' Obtient les prévisions météorologiques à partir d'une adresse.
#'
#' @param adresse Adresse à géocoder
#' @return Les prévisions météorologiques obtenues
#' @export
get_forecast.character <- function(adresse) {
  forecast.character(adresse)
  
  coordinates <- get_gps_coordinate(adresse)
  
  resultat_previsions <- perform_request(latitude = coordinates[1], longitude = coordinates[2])
  resultat_traitement <- unnest_response(resultat_previsions)
  
  return(resultat_traitement)
}

get_forecast.character("46, rue Proudhon, 93210, Saint-Denis, France")
get_forecast.numeric(c(47.243140, -1.554258))
```

La fonction opère correctement.

### Question 14

#### Documentez la fonction get_forecast en utilisant les balises Roxygen appropriées.

```{r}
#' get_forecast
#'
#' Cette fonction générique permet d'obtenir des prévisions météorologiques en fonction d'une localisation.
#' Elle a deux implémentations spécifiques :
#'   - get_forecast.character : pour obtenir des prévisions à partir d'un nom de site olympique ou d'une adresse.
#'   - get_forecast.numeric : pour obtenir des prévisions à partir des coordonnées GPS.
#'
#' @param location Emplacement pour obtenir les prévisions (Adresse, nom de site olympique ou coordonnées GPS).
#'   - Pour get_forecast.character : un caractère de taille 1.
#'   - Pour get_forecast.numeric : un vecteur numérique de taille 2 (latitude, longitude).
#' @return Un tibble contenant les prévisions météorologiques.
#' @examples
#' Exemples d'utilisation :
#' \dontrun{
#'   # Exemples d'utilisation
#'   get_forecast("Nantes")
#'   get_forecast(c(48.85, 2.35))
#' }
#'
#' @seealso
#' \code{\link{get_forecast.character}}, \code{\link{get_forecast.numeric}},
#' \code{\link{perform_request}}, \code{\link{unnest_response}}
#'
#' @export
get_forecast <- function(x) {
  if (is.numeric(x)) {
    get_forecast.numeric(x)
  } else if (is.character(x)) {
    get_forecast.character(x)
  } else {
    stop("L'argument doit être de type numeric (coordonnées) ou character (adresse).")
  }
}

resultat14 <-get_forecast("District de Huairou, Chine, 101406")
print(resultat14)

resultat14bis <-get_forecast(c(47.243140, -1.554258))
print(resultat14bis)
```

### Question 15

#### Mettez à jour le fichier DESCRIPTION. Assurez-vous d’avoir un NAMESPACE à jour en utilisant devtools::document.

```{r}
library(olympicsWeather)
help("get_forecast")
```

### Question bonus

#### Quelle stratégie employeriez-vous pour fournir une sortie visuelle aux utilisateurs ? Essayez de proposer une fonction dans le package pour rendre visuelle la sortie du package.

```{r}
#' Visualise les emplacements des prévisions météorologiques sur une carte Leaflet
#'
#' @param forecast_locations Un data frame contenant les emplacements des prévisions météorologiques avec au moins deux colonnes : long (longitude) et lat (latitude).
#' @return Une carte Leaflet avec des marqueurs pour les emplacements des prévisions météorologiques.
#' @export
visualiser_carte <- function(forecast_locations) {
  require(leaflet)
  
  ma_carte <- leaflet() %>%
    addTiles() %>%
    addMarkers(lng = forecast_locations$long, lat = forecast_locations$lat)
  
  return(ma_carte)
}


#exemple d'utilisation 
exemple1 <- data.frame(
  long = c(-0.1278, -73.935242, 151.2093), 
  lat = c(51.5074, 40.730610, -33.8688)  
)
ma_carte <- visualiser_carte(exemple1)
ma_carte

```

```{r}

#' Visualise les prévisions météorologiques
#'
#' @param forecast_data Un data frame contenant les données de prévisions météorologiques avec au moins deux colonnes : date et température.
#' @return Un objet ggplot représentant les prévisions météorologiques.
#' @export
visualiser_previsions <- function(forecast_data) {
  require(ggplot2)
  
  ggplot(data = forecast_data, aes(x = date, y = temperature)) +
    geom_line() +
    labs(title = "Prévision de la température", x = "Date", y = "Température (°C)")
}

#exemple d'utilisation 
exemple2 <- data.frame(
  date = seq(as.Date("2022-01-01"), by = "day", length.out = 7), 
  temperature = c(20, 22, 23, 25, 24, 23, 22) 
)

mon_graph <- visualiser_previsions(exemple2)
print(mon_graph)
```
